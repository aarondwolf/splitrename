{smcl}
{* 21aug2019}{...}
{cmd:help splitrename}
{hline}

{title:Title}

{phang}
{cmd:splitrename} {hline 2} Rename and re-label a series of variable with a similar 
stub in both the variable name and label.


{title:Syntax}

	{cmd:splitrename} {cmd:{help varlist}} {cmd:if} , {opt old:name}{cmd:(}{help varname}{cmd:)}  {opt new:name}{cmd:(}{help varname}{cmd:)}


{title:Description}

{pstd}
{cmd:splitrename} takes a list of variables in {help varlist} with a
common stub (specified by {opt old:name}) and renames them, changing all 
instances of {opt old:name} to {opt new:name} in all variable names and labels.


{title:Options}

{phang}{opt old:name}{cmd:(}{help varname}{cmd:)} specifies the stub common to
all variables in {help varlist}.

{phang}{opt new:name}{cmd:(}{help varname}{cmd:)} specifies the new stub that 
will replace {opt old:name}



{title:Examples}

{pstd}
Let's say you have three variables, c1, c1_1, and c1_2 (for example, 
if c1 was split). You want to rename them all var, var_1, and var_2. The command
you would us is:

	{cmd:.} {cmd: splitrename c1 c1_1 c1_2, oldname(c1) newname(var)}
		

{title:Stored results}

{pstd}
{cmd:na} stores the following in {cmd:r()}:

{synoptset 20 tabbed}{...}
{p2col 5 20 24 2: Locals}{p_end}
{synopt:{cmd:r(varlist)}}all variables specified by {opt varlist}{p_end}
{synopt:{cmd:r(newvars)}}all new variable names generated by {cmd:splitrename}{p_end}


{title:Authors}

{pstd}Aaron Wolf, Northwestern University{p_end}
{pstd}aaron.wolf@u.northwestern.edu{p_end}

